#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Camera
{
    float4x4 u_view;
    float4x4 u_proj;
    float4x4 u_viewProj;
    float3 u_viewPos;
};

struct type_Model
{
    float4x4 u_model;
};

struct type_Light
{
    float3 u_lightpos;
};

struct main0_out
{
    float3 out_var_POSITION0 [[user(locn0)]];
    float3 out_var_POSITION1 [[user(locn1)]];
    float3 out_var_POSITION2 [[user(locn2)]];
    float2 out_var_TEXCOORD0 [[user(locn3)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 in_var_POSITION0 [[attribute(0)]];
    float3 in_var_NORMAL0 [[attribute(1)]];
    float3 in_var_TANGENT0 [[attribute(2)]];
    float3 in_var_TANGENT1 [[attribute(3)]];
    float2 in_var_TEXCOORD0 [[attribute(4)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant type_Camera& Camera [[buffer(0)]], constant type_Model& Model [[buffer(1)]], constant type_Light& Light [[buffer(2)]])
{
    main0_out out = {};
    float3x3 _73 = transpose(float3x3(fast::normalize(Model.u_model * float4(in.in_var_TANGENT0, 0.0)).xyz, fast::normalize(Model.u_model * float4(in.in_var_TANGENT1, 0.0)).xyz, fast::normalize(Model.u_model * float4(in.in_var_NORMAL0, 0.0)).xyz));
    float4 _78 = Model.u_model * float4(in.in_var_POSITION0, 1.0);
    out.gl_Position = Camera.u_viewProj * _78;
    out.out_var_POSITION0 = Camera.u_viewPos * _73;
    out.out_var_POSITION1 = _78.xyz * _73;
    out.out_var_POSITION2 = Light.u_lightpos * _73;
    out.out_var_TEXCOORD0 = in.in_var_TEXCOORD0;
    return out;
}

