#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Light
{
    float3 u_lightcolor;
};

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct main0_in
{
    float3 in_var_POSITION0 [[user(locn0)]];
    float3 in_var_POSITION1 [[user(locn1)]];
    float3 in_var_POSITION2 [[user(locn2)]];
    float2 in_var_TEXCOORD0 [[user(locn3)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_Light& Light [[buffer(0)]], texture2d<float> AlbedoTex [[texture(0)]], texture2d<float> NormalTex [[texture(1)]], sampler Sampler [[sampler(0)]])
{
    main0_out out = {};
    float3 _56 = fast::normalize((NormalTex.sample(Sampler, in.in_var_TEXCOORD0).xyz * 2.0) - float3(1.0));
    float3 _57 = in.in_var_POSITION2 - in.in_var_POSITION1;
    float3 _58 = fast::normalize(_57);
    float _72 = 1.0 / length(_57);
    out.out_var_SV_Target0 = float4(((((Light.u_lightcolor * precise::max(dot(_56, _58), 0.0)) * _72) + ((Light.u_lightcolor * (0.20000000298023223876953125 * powr(precise::max(dot(_56, fast::normalize(_58 + fast::normalize(in.in_var_POSITION0 - in.in_var_POSITION1))), 0.0), 32.0))) * _72)) + ((Light.u_lightcolor * 0.100000001490116119384765625) * _72)) * AlbedoTex.sample(Sampler, in.in_var_TEXCOORD0).xyz, 1.0);
    return out;
}

