#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Params
{
    float2 u_offset;
    int u_numCells;
    float u_thickness;
    float u_scroll;
};

struct main0_out
{
    float4 out_var_SV_Target [[color(0)]];
};

struct main0_in
{
    float2 in_var_TEXCOORD0 [[user(locn0)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_Params& Params [[buffer(0)]])
{
    main0_out out = {};
    float _43 = float(Params.u_numCells);
    float2 _47 = fmod(in.in_var_TEXCOORD0 - float2(0.5), float2(1.0 / _43)) * _43;
    float2 _55 = fmod(float2(0.5), float2(0.5 / _43)) * (_43 * 2.0);
    float _58 = (Params.u_thickness * 0.5) / Params.u_scroll;
    float _59 = _55.y;
    bool _66;
    if (!(_59 < _58))
    {
        _66 = _59 > (1.0 - _58);
    }
    else
    {
        _66 = true;
    }
    bool _72;
    if (!_66)
    {
        _72 = _55.x < _58;
    }
    else
    {
        _72 = true;
    }
    bool _79;
    if (!_72)
    {
        _79 = _55.x > (1.0 - _58);
    }
    else
    {
        _79 = true;
    }
    float3 _102;
    if (_79)
    {
        float _83 = 2.0 - (2.0 * Params.u_scroll);
        float _100;
        do
        {
            if (_83 < 0.0)
            {
                _100 = 0.0;
                break;
            }
            if (_83 < 0.5)
            {
                _100 = (2.0 * _83) * _83;
                break;
            }
            else
            {
                _100 = 1.0 - (powr(((-2.0) * _83) + 2.0, 2.0) * 0.5);
                break;
            }
            break; // unreachable workaround
        } while(false);
        _102 = float3(0.5) * _100;
    }
    else
    {
        _102 = float3(0.0);
    }
    float _103 = Params.u_thickness / Params.u_scroll;
    float _104 = _47.y;
    bool _111;
    if (!(_104 < _103))
    {
        _111 = _104 > (1.0 - _103);
    }
    else
    {
        _111 = true;
    }
    bool _117;
    if (!_111)
    {
        _117 = _47.x < _103;
    }
    else
    {
        _117 = true;
    }
    bool _124;
    if (!_117)
    {
        _124 = _47.x > (1.0 - _103);
    }
    else
    {
        _124 = true;
    }
    float3 _148;
    if (_124)
    {
        float _128 = (2.0 * Params.u_scroll) - 1.0;
        float _145;
        do
        {
            if (_128 < 0.0)
            {
                _145 = 0.0;
                break;
            }
            if (_128 < 0.5)
            {
                _145 = (2.0 * _128) * _128;
                break;
            }
            else
            {
                _145 = 1.0 - (powr(((-2.0) * _128) + 2.0, 2.0) * 0.5);
                break;
            }
            break; // unreachable workaround
        } while(false);
        _148 = _102 + (float3(0.5) * _145);
    }
    else
    {
        _148 = _102;
    }
    float _157 = length((((Params.u_offset - float2(0.5)) - Params.u_offset) * 2.0) / float2(Params.u_scroll));
    float _165;
    if ((1.0 - _157) <= 0.0)
    {
        _165 = 0.0;
    }
    else
    {
        _165 = powr(2.0, _157 * (-10.0));
    }
    out.out_var_SV_Target = float4(precise::min(_148, float3(0.5)) * precise::max(2.5 * _165, 0.0), 1.0);
    return out;
}

